import random
import string
import argparse
import sys

class PasswordGenerator:
    def __init__(self):
        self.complexity_levels = {
            'low': {
                'description': '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)',
                'chars': string.ascii_lowercase,
                'min_length': 4
            },
            'medium': {
                'description': '–ë—É–∫–≤—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞',
                'chars': string.ascii_letters,
                'min_length': 6
            },
            'high': {
                'description': '–ë—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã',
                'chars': string.ascii_letters + string.digits,
                'min_length': 8
            },
            'very-high': {
                'description': '–ë—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã + —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã',
                'chars': string.ascii_letters + string.digits + string.punctuation,
                'min_length': 10
            }
        }
    
    def generate_password(self, length, complexity):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        if complexity not in self.complexity_levels:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {complexity}")
        
        chars = self.complexity_levels[complexity]['chars']
        min_length = self.complexity_levels[complexity]['min_length']
        
        if length < min_length:
            print(f"‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ '{complexity}' —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ {min_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        password = ''.join(random.choice(chars) for _ in range(length))
        return password
    
    def calculate_strength(self, password):
        """–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        strength = 0
        if any(c.islower() for c in password):
            strength += 1
        if any(c.isupper() for c in password):
            strength += 1
        if any(c.isdigit() for c in password):
            strength += 1
        if any(c in string.punctuation for c in password):
            strength += 1
        
        length_score = min(len(password) // 4, 3)  # –ú–∞–∫—Å–∏–º—É–º 3 –±–∞–ª–ª–∞ –∑–∞ –¥–ª–∏–Ω—É
        return strength + length_score
    
    def display_complexity_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Ä–æ–≤–Ω—è—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        print("\nüìä –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π:")
        print("-" * 50)
        for level, info in self.complexity_levels.items():
            print(f"{level:12} - {info['description']} (–º–∏–Ω. –¥–ª–∏–Ω–∞: {info['min_length']})")
        print()

def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π')
    parser.add_argument('-l', '--length', type=int, default=12, 
                       help='–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 12)')
    parser.add_argument('-c', '--complexity', type=str, default='high',
                       choices=['low', 'medium', 'high', 'very-high'],
                       help='–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: low, medium, high, very-high')
    parser.add_argument('-n', '--number', type=int, default=1,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ä–æ–ª–µ–π')
    parser.add_argument('--info', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Ä–æ–≤–Ω—è—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–∏')
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) == 1:
        interactive_mode()
        return
    
    args = parser.parse_args()
    generator = PasswordGenerator()
    
    if args.info:
        generator.display_complexity_info()
        return
    
    try:
        print(f"\nüîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π:")
        print(f"   –î–ª–∏–Ω–∞: {args.length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {args.complexity}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {args.number}")
        print("-" * 40)
        
        for i in range(args.number):
            password = generator.generate_password(args.length, args.complexity)
            strength = generator.calculate_strength(password)
            strength_stars = "‚òÖ" * strength + "‚òÜ" * (8 - strength)
            
            print(f"–ü–∞—Ä–æ–ª—å {i+1}: {password}")
            print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {strength_stars} ({strength}/8)")
            print()
            
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    generator = PasswordGenerator()
    
    print("üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
    print("=" * 50)
    
    # –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    generator.display_complexity_info()
    
    while True:
        complexity = input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (low/medium/high/very-high): ").lower()
        if complexity in generator.complexity_levels:
            break
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # –í—ã–±–æ—Ä –¥–ª–∏–Ω—ã
    min_length = generator.complexity_levels[complexity]['min_length']
    while True:
        try:
            length = int(input(f"–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–º–∏–Ω. {min_length}): "))
            if length >= min_length:
                break
            print(f"‚ùå –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_length} —Å–∏–º–≤–æ–ª–æ–≤.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π
    while True:
        try:
            count = int(input("–°–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? (1-20): "))
            if 1 <= count <= 20:
                break
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    print(f"\nüîê –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("-" * 40)
    
    for i in range(count):
        password = generator.generate_password(length, complexity)
        strength = generator.calculate_strength(password)
        strength_stars = "‚òÖ" * strength + "‚òÜ" * (8 - strength)
        
        print(f"–ü–∞—Ä–æ–ª—å {i+1}: {password}")
        print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {strength_stars} ({strength}/8)")
        print()

if __name__ == "__main__":
    if len(sys.argv) == 1:
        interactive_mode()
    else:
        main()